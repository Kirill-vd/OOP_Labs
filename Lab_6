import random as r


class Product():
    package = 25
    coffee_beans = {'Arabica beans': [50.0, 100], 'Robusta beans': [80.0, 120], 'Liberica beans': [100.0, 116],
                    'Exselsa beans': [115.0, 130]}
    coffee_ground = {'Arabica ground': [60.0, 105], 'Robusta ground': [90.0, 125], 'Liberica ground': [110.0, 121],
                     'Exselsa ground': [125.0, 135]}
    coffee_soluble = {'Arabica soluble': [80.0, 150], 'Robusta soluble': [110, 170], 'Liberica soluble': [130.0, 160],
                      'Exselsa soluble': [145, 180]}
    coffee_jar = {'Arabica in jar': [85.0, 350], 'Robusta in jar': [115.0, 370], 'Liberica in jar': [135.0, 360],
                  'Exselsa in jar': [150.0, 380]}
    coffee_packed = {'Arabica packed': [100.0, 250], 'Robusta packed': [130.0, 270], 'Liberica packed': [150.0, 260],
                     'Exselsa packed': [165.0, 280]}

    def __init__(self, product):
        self.product = product
        if product in self.coffee_beans:
            self.price = self.coffee_beans[product][0]
            self.weight = self.coffee_beans[product][1]
            self.quality = self.price / self.weight
            self.coffee_beans = Coffee_beans(self.price, self.weight, self.quality, self.product)
        if product in self.coffee_ground:
            self.price = self.coffee_ground[product][0]
            self.weight = self.coffee_ground[product][1]
            self.quality = self.price / self.weight
            self.coffee_ground = Coffee_ground(self.price, self.weight, self.quality, self.product)
        if product in self.coffee_soluble:
            self.price = self.coffee_soluble[product][0]
            self.weight = self.coffee_soluble[product][1]
            self.quality = self.price / self.weight
            self.coffee_soluble = Coffee_soluble(self.price, self.weight, self.quality, self.product)
        if product in self.coffee_jar:
            self.price = self.coffee_jar[product][0]
            self.weight = self.coffee_jar[product][1]
            self.quality = self.price / self.weight
            self.coffee_jar = Coffee_jar(self.price, self.weight, self.quality, self.product)
        if product in self.coffee_packed:
            self.price = self.coffee_packed[product][0]
            self.weight = self.coffee_packed[product][1]
            self.quality = self.price / self.weight
            self.coffee_packed = Coffee_packed(self.price, self.weight, self.quality, self.product)


class Van:
    coffee_list = []
    qualities = set()
    def __init__(
            self, coffee_beans=None, coffee_ground=None,
            coffee_soluble=None, coffee_jar=None, coffee_packed=None,
            max_weight=5000, max_price=10000):
        self.max_weight = max_weight
        self.max_price = max_price
        if coffee_beans != None:
            self.coffee_beans = coffee_beans
            self.coffee_list.append(coffee_beans)
        if coffee_ground != None:
            self.coffee_ground = coffee_ground
            self.coffee_list.append(coffee_ground)
        if coffee_soluble != None:
            self.coffee_soluble = coffee_soluble
            self.coffee_list.append(coffee_soluble)
        if coffee_jar != None:
            self.coffee_jar = coffee_jar
            self.coffee_list.append(coffee_jar)
        if coffee_packed != None:
            self.coffee_packed = coffee_packed
            self.coffee_list.append(coffee_packed)
        self.check()

    def load(self, product):
        if product.product in Product.coffee_beans:
            self.coffee_beans = Product(product.product)
            self.coffee_list.append(self.coffee_beans)
        if product.product in Product.coffee_ground:
            self.coffee_ground = Product(product.product)
            self.coffee_list.append(self.coffee_ground)
        if product.product in Product.coffee_soluble:
            self.coffee_soluble = Product(product.product)
            self.coffee_list.append(self.coffee_soluble)
        if product.product in Product.coffee_jar:
            self.coffee_jar = Product(product.product)
            self.coffee_list.append(self.coffee_jar)
        if product.product in Product.coffee_packed:
            self.coffee_packed = Product(product.product)
            self.coffee_list.append(self.coffee_packed)
        self.check()


    def check(self):
        self.current_price = 0
        self.current_weight = 0
        for i in self.coffee_list:
            self.current_price += i.price
            self.current_weight += i.weight+Product.package
        if self.current_price > self.max_price:
            print('Ціна зависока')
        if self.current_weight > self.max_weight:
            print('Вага завелика')


    def sort_quality(self, quality_range):
        print('Кава відсортована за якістю: ')
        for i in self.coffee_list:
            self.qualities.add(i.quality)
            if int(i.quality*10) in range(quality_range[0], quality_range[1]):
                print(i.product, 'задовольняє діапазон якості')
        for s in sorted(list(self.qualities)):
            for q in self.coffee_list:
                if q.quality == s:
                    print(q.product, 'з якістю', s)


class Coffee_beans:
     def __init__(self, price, weight, quality, product):
         self.price = price
         self.weight = weight
         self.quality = quality
         self.name = product


class Coffee_ground:
    def __init__(self, price, weight, quality, product):
        self.price = price
        self.weight = weight
        self.quality = quality
        self.name = product


class Coffee_soluble:
    def __init__(self, price, weight, quality, product):
        self.price = price
        self.weight = weight
        self.quality = quality
        self.name = product


class Coffee_jar:
    def __init__(self, price, weight, quality, product):
        self.price = price
        self.weight = weight
        self.quality = quality
        self.name = product


class Coffee_packed:
    def __init__(self, price, weight, quality, product):
        self.price = price
        self.weight = weight
        self.quality = quality
        self.name = product


prod_list = []
for i in range(10):
    x = r.randint(1, 5)
    if x == 1:
        Coffee = Product(list(Product.coffee_beans.keys())[r.randint(0, 3)])
        prod_list.append(Coffee)
    elif x == 2:
        Coffee = Product(list(Product.coffee_ground.keys())[r.randint(0, 3)])
        prod_list.append(Coffee)
    elif x == 3:
        Coffee = Product(list(Product.coffee_soluble.keys())[r.randint(0, 3)])
        prod_list.append(Coffee)
    elif x == 4:
        Coffee = Product(list(Product.coffee_jar.keys())[r.randint(0, 3)])
        prod_list.append(Coffee)
    else:
        Coffee = Product(list(Product.coffee_packed.keys())[r.randint(0, 3)])
        prod_list.append(Coffee)

Gazel = Van(max_price=float(input('Please, enter your maximum price: ')),
            max_weight=float(input('Please, enter your maximum weight: ')))

for i in prod_list:
    Gazel.load(i)

for i in Gazel.coffee_list:
    print(i.product)

Gazel.sort_quality((5, 9))
